# Multi-stage Dockerfile for AI Backend and Frontend Application

# Stage 1: Python Backend Services
FROM python:3.9-slim as python-backend

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Copy Python requirements and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy Python backend code
COPY aibackend/ ./aibackend/
COPY .env .env

# Stage 2: Node.js Auth Backend
FROM node:18-alpine as node-backend

WORKDIR /app/auth_backend

# Copy package.json and install dependencies
COPY auth_backend/package*.json ./
RUN npm install dotenv mongodb express cors mongoose bcryptjs

# Copy auth backend code
COPY auth_backend/ .
COPY auth_backend/.env .env

# Stage 3: Next.js Frontend
FROM node:18-alpine as frontend-build

WORKDIR /app/frontend

# Copy package.json and install dependencies
COPY frontend/package*.json ./
RUN npm install next react react-dom

# Copy frontend code
COPY frontend/ .

# Build the frontend
RUN npm run build

# Stage 4: Final Multi-Service Container
FROM python:3.9-slim

# Install Node.js and system dependencies
RUN apt-get update && apt-get install -y \
    curl \
    gcc \
    g++ \
    && curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python dependencies and install
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy all application code
COPY --from=python-backend /app/aibackend ./aibackend
COPY --from=python-backend /app/.env .env

COPY --from=node-backend /app/auth_backend ./auth_backend
COPY --from=frontend-build /app/frontend ./frontend

# Install Node.js dependencies for auth backend
WORKDIR /app/auth_backend
RUN npm install dotenv mongodb express cors mongoose bcryptjs

# Install Node.js dependencies for frontend
WORKDIR /app/frontend
RUN npm install next react react-dom

# Return to main directory
WORKDIR /app

# Create startup script
RUN echo '#!/bin/bash\n\
# Start MongoDB (if not using external service)\n\
# mongod --fork --logpath /var/log/mongodb.log\n\
\n\
# Start Python RAG agent in background\n\
cd /app/aibackend/agents\n\
python rag.py &\n\
\n\
# Start Python user agent in background\n\
python user.py &\n\
\n\
# Start CSV uploader in background\n\
cd /app/aibackend/update_transactions\n\
python csv_uploader.py &\n\
\n\
# Start Auth Backend in background\n\
cd /app/auth_backend\n\
node server.js &\n\
\n\
# Start Frontend (this will run in foreground)\n\
cd /app/frontend\n\
npm run dev\n\
' > /app/start.sh && chmod +x /app/start.sh

# Alternative startup script for Streamlit testing
RUN echo '#!/bin/bash\n\
# Start Python RAG agent in background\n\
cd /app/aibackend/agents\n\
python rag.py &\n\
\n\
# Start Python user agent in background\n\
python user.py &\n\
\n\
# Start Streamlit app\n\
cd /app/aibackend/app\n\
streamlit run app.py --server.port 8501 --server.address 0.0.0.0\n\
' > /app/start-streamlit.sh && chmod +x /app/start-streamlit.sh

# Expose ports
EXPOSE 3000 3001 8501 5000

# Environment variables
ENV GEMINI_API_KEY=AIzaSyD59gZsEmRe6PQLl-mlswgnFp52L2BAWKc
ENV DB_USER=myuser
ENV DB_PASSWORD=mypassword
ENV DB_HOST=localhost
ENV DB_PORT=3306
ENV DB_NAME=transactionDB

# Default command (can be overridden)
CMD ["/app/start.sh"]

# To run with Streamlit instead:
# docker run -p 8501:8501 your-image-name /app/start-streamlit.sh